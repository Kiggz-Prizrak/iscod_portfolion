import React from "react";
import Hero from "../../components/Hero";
import ProjectBanner from "../../components/ProjectBanner";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faJs, faReact, faNodeJs } from "@fortawesome/free-brands-svg-icons";
import {
  faRust,
  faDocker,
  faLinux,
  faGit,
  faGithub,
  faLinkedin,
  faDev,
  faStackOverflow,
  faOpenai,
} from "@fortawesome/free-brands-svg-icons";
import { faHtml5, faCss3Alt } from "@fortawesome/free-brands-svg-icons";
const Lyseo = () => {
  const icons = [faJs, faReact, faNodeJs, faRust, faHtml5, faCss3Alt];
  const gradients = [
    "linear-gradient(135deg, #ff00ff, #00ffff)",
    "linear-gradient(90deg, #ffcc00, #ff00ff)",
    "linear-gradient(120deg, #00ffff, #ff007f)",
    "linear-gradient(45deg, #00ff9f, #7d00ff)",
    "linear-gradient(60deg, #ff007f, #00aaff)",
    "linear-gradient(100deg, #ff00aa, #00ffff)",
  ];
  return (
    <main className="bg-nebula bg-stars ">
      <ProjectBanner title="Lyseo" subtitle="Rust ‚Äì Performance & S√©curit√©" />

      <div className="project ">
        <div className="futures__block bg-grid">
          <FontAwesomeIcon icon={faRust} className="fa-circle-bg fa-glitch" />
          <FontAwesomeIcon icon={faDocker} className="fa-circle-bg fa-glitch" />
          <FontAwesomeIcon icon={faGit} className="fa-circle-bg fa-glitch" />
          <FontAwesomeIcon icon={faGithub} className="fa-circle-bg fa-glitch" />
          <FontAwesomeIcon
            icon={faLinkedin}
            className="fa-circle-bg fa-glitch"
          />
          <FontAwesomeIcon icon={faLinux} className="fa-circle-bg fa-glitch" />
        </div>
        <div style={{ display: "flex", gap: "2rem", fontSize: "4rem" }}>
          <FontAwesomeIcon icon={faJs} className="fa-neon" size="4px" />
          <FontAwesomeIcon icon={faReact} className="fa-gradient" size="4px" />
          <FontAwesomeIcon icon={faNodeJs} className="fa-circle" size="4px" />
          <FontAwesomeIcon icon={faJs} className="fa-glitch " size="4px" />
          <FontAwesomeIcon icon={faReact} className="fa-gradient" />
          <FontAwesomeIcon icon={faRust} className="fa-gradient" />

          <FontAwesomeIcon
            icon={faNodeJs}
            className="fa-circle-bg fa-glitch"
            size="4px"
          />
        </div>
        <section className="project__meta">
          <p>
            üìÖ <strong>P√©riode :</strong> 2025 ‚Äî projet personnel de recherche
            et d‚Äôexp√©rimentation autour du langage Rust.
          </p>
          <p>
            üß† <strong>R√©alisation :</strong> d√©velopp√© en{" "}
            <span className="highlight-blue">autonomie compl√®te</span>, dans une
            d√©marche d‚Äôapprentissage et d‚Äôexploration technique.
          </p>
        </section>

        <section className="project__section bg-grid">
          <h2 className="project__subtitle neon-yellow">Lancement du projet</h2>

          <div className="project__content">
            <p>
              √Ä l‚Äôorigine, le projet Lyseo est n√© d‚Äôun besoin clair : disposer
              d‚Äôun outil capable de traiter efficacement des op√©rations
              intensives tout en garantissant une s√©curit√© m√©moire
              irr√©prochable.
            </p>

            <p>
              De nombreux langages (comme <strong>C</strong>,{" "}
              <strong>C++</strong> ou
              <strong> Java</strong>) permettent de travailler sur des
              applications syst√®mes ou des backends performants, mais chacun
              pr√©sente des limites :
            </p>

            <ul>
              <li>
                ‚ö° <strong>C et C++</strong> ‚Üí grande rapidit√©, mais risques
                √©lev√©s d‚Äôerreurs m√©moire (segmentation faults, fuites).
              </li>
              <li>
                üõ° <strong>Java</strong> ‚Üí meilleure s√ªret√©, mais consommation
                m√©moire plus importante et latences li√©es au garbage collector.
              </li>
            </ul>

            <p>L‚Äôobjectif de Lyseo √©tait donc de trouver un compromis :</p>

            <ul>
              <li>üöÄ La performance d‚Äôun langage bas niveau (comme C++).</li>
              <li>üîí La s√©curit√© et la fiabilit√© d‚Äôun langage moderne.</li>
            </ul>

            <p>Rust s‚Äôest impos√© comme le choix id√©al gr√¢ce √† :</p>

            <ol>
              <li>
                Son syst√®me de gestion de la m√©moire bas√© sur l‚Äôemprunt et la
                possession (<em>borrow checker</em>).
              </li>
              <li>
                Sa capacit√© √† g√©rer la concurrence sans <em>data races</em>.
              </li>
              <li>
                Sa performance proche du C/C++, mais sans leurs faiblesses
                historiques.
              </li>
            </ol>

            <p>
              L‚Äôenjeu initial consistait √† concevoir une architecture logicielle
              modulaire en Rust capable de :
            </p>

            <ul>
              <li>
                R√©pondre √† des besoins vari√©s (traitement de donn√©es, gestion de
                flux, backend).
              </li>
              <li>Servir de base √©volutive pour des extensions futures.</li>
              <li>
                Rester suffisamment didactique pour illustrer concr√®tement la
                puissance de Rust.
              </li>
            </ul>

            <p>
              D√®s le d√©part, le projet a √©t√© con√ßu comme une exp√©rience
              technique et pratique permettant non seulement de r√©pondre √† un
              cas d‚Äôusage pr√©cis, mais aussi d‚Äôapporter un retour d‚Äôexp√©rience
              complet sur l‚Äôutilisation de Rust dans un contexte r√©el.
            </p>
          </div>
        </section>

        <section className="project__section steps">
          <h2 className="project__subtitle neon-yellow">Les √©tapes</h2>
          <p>
            La r√©alisation du projet Lyseo s‚Äôest d√©roul√©e en plusieurs √©tapes
            successives, chacune ayant permis de consolider les bases techniques
            et d‚Äôaffiner les objectifs fonctionnels.
          </p>

          <div className="steps__list">
            <div className="steps__item">
              <div className="steps__badge">1</div>
              <h3>Analyse et d√©finition des besoins</h3>
              <ul>
                <li>‚ú¶ Obtenir un outil rapide et √©conome en ressources</li>
                <li>‚ú¶ Garantir la s√©curit√© m√©moire et concurrente</li>
                <li>‚ú¶ Concevoir une architecture modulaire √©volutive</li>
              </ul>
            </div>

            <div className="steps__item">
              <div className="steps__badge">2</div>
              <h3>Conception de l‚Äôarchitecture logicielle</h3>
              <p>
                Architecture modulaire, s√©lection de crates :
                <span className="highlight"> Serde</span>,
                <span className="highlight"> Tokio</span>, tests unitaires et
                int√©gration.
              </p>
            </div>

            <div className="steps__item">
              <div className="steps__badge">3</div>
              <h3>D√©veloppement et impl√©mentation</h3>
              <ul>
                <li>‚ú¶ Gestion stricte de la m√©moire (sans GC)</li>
                <li>‚ú¶ S√©curit√© du compilateur</li>
                <li>‚ú¶ Multi-threads sans conflits</li>
              </ul>
            </div>

            <div className="steps__item">
              <div className="steps__badge">4</div>
              <h3>Optimisation et tests</h3>
              <p>
                Profilage (ex√©cution, m√©moire), logs d√©taill√©s, validation de la
                stabilit√© par tests de charge.
              </p>
            </div>

            <div className="steps__item">
              <div className="steps__badge">5</div>
              <h3>Validation finale</h3>
              <p>
                Version stable test√©e par des utilisateurs, pr√™te √† accueillir
                des extensions (API, interface graphique, etc.).
              </p>
            </div>
          </div>
        </section>

        <section className="project__section bg-grid">
          <h2 className="project__subtitle neon-yellow">
            Les acteurs ‚Äì les interactions
          </h2>

          <div className="project__content">
            <p>
              Le projet <strong>Lyseo</strong> a √©t√© men√© de mani√®re
              principalement autonome, mais il s‚Äôest nourri de nombreux √©changes
              avec des d√©veloppeurs exp√©riment√©s et des membres de la communaut√©{" "}
              <strong>Rust</strong>.
            </p>

            <p>
              Ces interactions, r√©alis√©es via forums techniques et discussions
              sur les canaux open source, m‚Äôont permis de confronter mes choix
              d‚Äôarchitecture, d‚Äôoptimiser certaines approches de concurrence et
              d‚Äôadopter des bonnes pratiques sp√©cifiques √† Rust.
            </p>

            <p>
              J‚Äôai √©galement b√©n√©fici√© de retours de pairs sur la clart√© du
              code, la documentation et la structure des modules, ce qui a
              contribu√© √† professionnaliser davantage ma d√©marche et √† renforcer
              la qualit√© globale du projet.
            </p>
          </div>
        </section>

        <section className="project__section results">
          <h2 className="project__subtitle neon-yellow">Les r√©sultats</h2>

          {/* Bloc "Pour moi" */}
          <div className="results__block">
            <h3 className="results__title">Pour moi</h3>
            <p>
              Ce projet m‚Äôa permis d‚Äôexplorer et de ma√Ætriser un langage que je
              n‚Äôavais jusqu‚Äôici abord√© qu‚Äôen surface :{" "}
              <span className="highlight">Rust</span>.
            </p>
            <p>
              Gr√¢ce √† Lyseo, j‚Äôai acquis des comp√©tences pr√©cieuses dans
              plusieurs domaines :
            </p>
            <ul>
              <li>
                ‚ú¶ S√©curit√© m√©moire avec le{" "}
                <span className="highlight">borrow checker</span>
              </li>
              <li>‚ú¶ Programmation concurrente sans data races</li>
              <li>
                ‚ú¶ Optimisation des performances (comparaisons Rust vs Java/C++)
              </li>
              <li>‚ú¶ Approche modulaire pour un code clair et √©volutif</li>
            </ul>
            <p>
              En parall√®le, ce projet m‚Äôa form√© en autonomie : d√©finir une
              architecture, g√©rer un cycle complet de d√©veloppement et assurer
              une validation finale m‚Äôont permis de renforcer mon profil de
              d√©veloppeur full stack avec une dimension syst√®me.
            </p>
          </div>

          {/* Bloc "Pour le projet" */}
          <div className="results__block">
            <h3 className="results__title">Pour le projet</h3>
            <p>
              Lyseo a atteint son objectif initial : d√©montrer l‚Äôefficacit√© de
              Rust dans un contexte o√π
              <strong> performance</strong> et <strong> fiabilit√©</strong> sont
              essentielles.
            </p>
            <h4 className="results__subtitle">B√©n√©fices concrets observ√©s :</h4>
            <ul>
              <li>
                <span className="highlight">Performance accrue :</span>
                <ul>
                  <li>Temps d‚Äôex√©cution r√©duit par rapport √† Java</li>
                  <li>Consommation m√©moire tr√®s basse</li>
                </ul>
              </li>
              <li>
                <span className="highlight">Robustesse :</span>
                <ul>
                  <li>Aucun crash m√©moire contrairement √† C/C++</li>
                  <li>Stabilit√© confirm√©e lors de tests de charge</li>
                </ul>
              </li>
              <li>
                <span className="highlight">√âvolutivit√© :</span>
                <ul>
                  <li>Modules facilement ajoutables (API, GUI, ‚Ä¶)</li>
                  <li>Base r√©utilisable pour d‚Äôautres projets</li>
                </ul>
              </li>
            </ul>
            <p className="results__summary">
              En r√©sum√©, Lyseo illustre ce qu‚Äôapporte Rust dans un projet
              logiciel moderne :<strong> la performance du bas niveau</strong>{" "}
              avec
              <strong> la s√ªret√© du haut niveau</strong>.
            </p>
          </div>
        </section>

        <section className="project__section futures">
          <h2 className="project__subtitle neon-yellow">
            Les lendemains du projet
          </h2>
          <p>
            Lyseo n‚Äôa pas vocation √† rester un simple projet de d√©monstration.
            Les bases techniques mises en place offrent une marge d‚Äô√©volution
            importante, ouvrant la voie √† de nouvelles fonctionnalit√©s et √† des
            cas d‚Äôusage concrets.
          </p>

          <div className="futures__block">
            <h3>√âvolutions possibles</h3>
            <ul>
              <li>
                ‚ú¶ <strong>Interface graphique multiplateforme</strong> :
                int√©gration via <em>Tauri</em> ou <em>Flutter</em>, pour une
                exp√©rience moderne et ergonomique.
              </li>
              <li>
                ‚ú¶ <strong>API REST et services backend</strong> : ajout d‚Äôune
                couche r√©seau exposant les modules de Lyseo sous forme d‚ÄôAPI.
              </li>
              <li>
                ‚ú¶ <strong>Extension aux cas d‚Äôusage r√©els</strong> : gestion
                d‚Äôoutils syst√®mes, traitement de flux en temps r√©el,
                cybers√©curit√©.
              </li>
              <li>
                ‚ú¶ <strong>Optimisations avanc√©es</strong> : programmation
                parall√®le,
                <em> GPU computing</em> et int√©gration hybride (Rust + Python
                via FFI).
              </li>
            </ul>
          </div>

          <div className="futures__block">
            <h3>Vision √† long terme</h3>
            <p>
              Lyseo pourrait devenir un projet <strong>open-source</strong>,
              encourageant la collaboration et la contribution d‚Äôautres
              d√©veloppeurs int√©ress√©s par Rust et la performance logicielle.
            </p>
            <p>
              Il pourrait aussi servir de{" "}
              <strong>base technique commune</strong>
              pour des projets plus complexes, en capitalisant sur la robustesse
              de son architecture, la polyvalence de Rust et sa capacit√©
              d‚Äôint√©gration dans divers environnements (desktop, web, backend,
              embarqu√©).
            </p>
          </div>
        </section>

        <section className="project__section opinion">
          <h2 className="project__subtitle neon-yellow">Mon point de vue</h2>

          <p>
            Lyseo a repr√©sent√© pour moi bien plus qu‚Äôun simple exercice
            technique : c‚Äô√©tait un v√©ritable{" "}
            <strong>d√©fi intellectuel et m√©thodologique</strong>. J‚Äôai pu
            confronter mes acquis de d√©veloppeur full stack √† un univers
            diff√©rent, celui du <strong>langage syst√®me</strong>, et d√©couvrir
            de nouvelles fa√ßons d‚Äôaborder la conception logicielle.
          </p>

          <p>Ce projet m‚Äôa appris √† :</p>
          <ul>
            <li>
              ‚ú¶ r√©fl√©chir en termes de <strong>performance pure</strong>, en
              optimisant chaque op√©ration,
            </li>
            <li>
              ‚ú¶ penser la <strong>s√©curit√© d√®s la conception</strong>, en
              int√©grant des garde-fous dans l‚Äôarchitecture,
            </li>
            <li>
              ‚ú¶ d√©velopper une approche <strong>rigoureuse et modulaire</strong>
              , qui facilite la maintenance et l‚Äô√©volution.
            </li>
          </ul>

          <p>
            Mais au-del√† des aspects techniques, Lyseo m‚Äôa surtout montr√© la
            valeur d‚Äôun langage comme Rust dans un contexte moderne : il combine
            le meilleur des deux mondes ‚Äî la{" "}
            <strong>vitesse du bas niveau</strong> et la{" "}
            <strong>s√ªret√© du haut niveau</strong>.
          </p>

          <p>
            Je consid√®re Lyseo comme une <strong>exp√©rience fondatrice</strong>{" "}
            qui m‚Äôa permis d‚Äô√©largir mon horizon, de renforcer ma capacit√©
            d‚Äôadaptation et de confirmer mon int√©r√™t pour les technologies
            √©mergentes qui red√©finissent les standards de la programmation.
          </p>
        </section>

        <section className="project__section skills">
          <h2 className="project__subtitle neon-yellow">
            Comp√©tences associ√©es
          </h2>

          <ul className="skills__list">
            <li>
              ‚öôÔ∏è Langage <strong>Rust</strong>
            </li>
            <li>üß© Conception et architecture logicielle</li>
            <li>üîí S√©curit√© m√©moire et gestion de la concurrence</li>
            <li>üöÄ Optimisation des performances</li>
            <li>üß† Autonomie et rigueur dans la gestion de projet</li>
            <li>üí¨ Collaboration technique et communication</li>
          </ul>
          <div
            className="futures__block bg-grid"
            style={{
              display: "flex",
              alignItems: "center",
              justifyContent: "space-around",
            }}
          >
            <FontAwesomeIcon icon={faRust} className="fa-circle-bg fa-glitch" />
            <FontAwesomeIcon
              icon={faDocker}
              className="fa-circle-bg fa-glitch"
            />
            <FontAwesomeIcon icon={faGit} className="fa-circle-bg fa-glitch" />
            <FontAwesomeIcon
              icon={faGithub}
              className="fa-circle-bg fa-glitch"
            />
            <FontAwesomeIcon
              icon={faLinkedin}
              className="fa-circle-bg fa-glitch"
            />
            <FontAwesomeIcon
              icon={faLinux}
              className="fa-circle-bg fa-glitch"
            />
          </div>
        </section>
      </div>
    </main>
  );
};

export default Lyseo;
