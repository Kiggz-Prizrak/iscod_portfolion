import React from "react";

const DockerSkill = () => {
  return (
    <main className="bg-nebula bg-stars">
      <header className="skill__header">
        <h1 className="skill__title neon-yellow">Comp√©tence ‚Äî Docker</h1>
        <p className="skill__tagline">
          Containerisation, orchestration et industrialisation avec{" "}
          <strong>Docker</strong> et <strong>Docker Compose</strong>.
        </p>
      </header>

      {/* D√©finition */}
      <section className="skill__section bg-grid">
        <h2 className="skill__subtitle neon-blue">D√©finition</h2>

        <p>
          <strong>Docker</strong> a profond√©ment transform√© ma mani√®re de
          concevoir les projets. Au-del√† de la simple ex√©cution d‚Äôapplications,
          il m‚Äôa appris la rigueur et la reproductibilit√© : un projet bien
          dockeris√© doit pouvoir √™tre lanc√© en une seule commande, sur n‚Äôimporte
          quelle machine, sans d√©pendance externe.
        </p>

        <p>
          Docker est une plateforme de containerisation permettant d‚Äôisoler,
          d√©ployer et ex√©cuter des applications dans des environnements
          reproductibles et l√©gers. En encapsulant chaque service (base de
          donn√©es, API, frontend...) dans un container autonome, il garantit la
          coh√©rence entre le d√©veloppement, les tests et la production.
        </p>

        <p>
          Dans mes projets, <strong>Docker</strong> est au c≈ìur de
          l‚Äôindustrialisation logicielle : il standardise les environnements,
          simplifie le d√©ploiement et automatise les pipelines d‚Äôint√©gration
          continue via <strong>GitLab CI/CD</strong>. Je l‚Äôai utilis√© pour
          containeriser aussi bien des applications full stack{" "}
          <em>(Java, Node.js, React)</em> que des syst√®mes r√©seau complexes
          comme <strong>Large Field Theater</strong>.
        </p>
      </section>

      {/* √âl√©ments de preuve */}
      <section className="skill__section">
        <h2 className="skill__subtitle neon-blue">√âl√©ments de preuve</h2>

        <article className="proof">
          <h3>üé≠ Large Field Theater ‚Äî Architecture containeris√©e compl√®te</h3>
          <ul>
            <li>
              Containerisation du <strong>backend Node.js</strong> et de la base{" "}
              <strong>MySQL</strong> pour des environnements de test isol√©s.
            </li>
            <li>
              Cr√©ation d‚Äôun <strong>docker-compose.yml</strong> unifiant
              backend, base de donn√©es et serveurs DEM.
            </li>
            <li>
              Configuration de <strong>volumes persistants</strong> pour
              sauvegarder les donn√©es et simplifier le d√©veloppement local.
            </li>
            <li>
              Optimisation des images pour un usage r√©seau performant
              (Socket.IO, flux VR temps r√©el).
            </li>
          </ul>
          <p className="proof__result">
            R√©sultat : un environnement complet pr√™t √† √™tre d√©ploy√© sur
            n‚Äôimporte quelle machine, garantissant une coh√©rence parfaite entre
            les d√©veloppeurs et les serveurs de production.
          </p>
          <p className="proof__link">
            ‚Üí{" "}
            <Link to="/projects/large-field-theater">
              Voir le projet Large Field Theater
            </Link>
          </p>
        </article>

        <article className="proof">
          <h3>üì¶ Project Management Tool ‚Äî CI/CD et d√©ploiement automatis√©</h3>
          <ul>
            <li>
              Cr√©ation des <strong>Dockerfile</strong> pour le backend{" "}
              <strong>Spring Boot</strong>, le frontend <strong>Angular</strong>{" "}
              et la base de donn√©es <strong>MySQL</strong>.
            </li>
            <li>
              Orchestration via <strong>Docker Compose</strong> pour le build,
              les tests et le d√©ploiement local.
            </li>
            <li>
              Int√©gration d‚Äôune <strong>pipeline GitLab CI/CD</strong>{" "}
              automatisant chaque √©tape : build ‚Üí test ‚Üí push ‚Üí d√©ploiement.
            </li>
          </ul>
          <p className="proof__result">
            R√©sultat : une cha√Æne <strong>DevOps compl√®te</strong>, stable et
            automatis√©e, valid√©e par le jury ISCOD en juin 2025.
          </p>
          <p className="proof__link">
            ‚Üí <Link to="/projects/pmt">Voir le projet PMT</Link>
          </p>
        </article>

        <article className="proof">
          <h3>üß† D√©veloppement local multi-service</h3>
          <ul>
            <li>
              Utilisation de <strong>Docker Desktop</strong> et{" "}
              <strong>Docker Compose</strong> pour lancer automatiquement tous
              les services n√©cessaires (backend, base, socket server).
            </li>
            <li>
              Structuration des images pour que les d√©veloppeurs puissent
              simplement ex√©cuter <code>docker-compose up</code> et travailler
              imm√©diatement sans configuration manuelle.
            </li>
          </ul>
          <p className="proof__result">
            R√©sultat : gain de temps significatif et standardisation totale du
            d√©veloppement local entre postes.
          </p>
        </article>
      </section>

      {/* Autocritique */}
      <section className="skill__section">
        <h2 className="skill__subtitle neon-blue">Mon autocritique</h2>
        <ul className="checklist">
          <li>
            <strong>Niveau :</strong> ma√Ætrise avanc√©e des principes de
            containerisation (images, volumes, r√©seaux, orchestration Compose)
            et int√©gration dans un workflow DevOps complet.
          </li>
          <li>
            <strong>Place dans mon profil :</strong> Docker est une comp√©tence
            <span className="highlight-blue"> transversale</span> ‚Äî elle relie
            mes environnements <strong>Node</strong>, <strong>Java</strong> et{" "}
            <strong>MySQL</strong> tout en garantissant leur coh√©rence.
          </li>
          <li>
            <strong>Recul :</strong> l‚Äôutilisation de Docker m‚Äôa appris la{" "}
            <em>discipline structurelle</em> : chaque service doit √™tre isol√©,
            document√© et reproductible. J‚Äôai notamment surmont√© des difficult√©s
            li√©es aux r√©seaux inter-containers et √† la persistance des volumes.
          </li>
          <li>
            <strong>Bonnes pratiques :</strong> je maintiens des{" "}
            <strong>Dockerfile clairs</strong>, des images multi-√©tages
            optimis√©es et une documentation accessible √† l‚Äô√©quipe pour chaque
            environnement containeris√©.
          </li>
        </ul>
      </section>

      {/* √âvolution */}
      <section className="skill__section">
        <h2 className="skill__subtitle neon-blue">Mon √©volution sur Docker</h2>
        <ul>
          <li>
            Approfondir l‚Äôorchestration √† grande √©chelle via{" "}
            <strong>Kubernetes</strong> et <strong>Docker Swarm</strong>.
          </li>
          <li>
            Automatiser la surveillance des containers avec{" "}
            <strong>Prometheus</strong> et <strong>Grafana</strong>.
          </li>
          <li>
            Cr√©er des images <strong>multi-√©tages</strong> optimis√©es pour la
            production (build + run s√©par√©s).
          </li>
          <li>
            Int√©grer des <strong>tests d‚Äôint√©gration automatis√©s</strong>{" "}
            directement dans les pipelines CI/CD.
          </li>
          <li>
            Objectif 2026 : orchestrer les environnements LFT complets sur un
            cluster <strong>Kubernetes local</strong> pour tester la scalabilit√©
            r√©seau.
          </li>
        </ul>
      </section>

      {/* R√©alisations associ√©es */}
      <section className="skill__section">
        <h2 className="skill__subtitle neon-blue">R√©alisations associ√©es</h2>

        <div className="skill__cards">
          <Link to="/projects/large-field-theater" className="skill__card">
            <h3>üé≠ Large Field Theater</h3>
            <p>Backend Node.js ¬∑ MySQL ¬∑ Docker Compose</p>
          </Link>

          <Link to="/projects/pmt" className="skill__card">
            <h3>üì¶ Project Management Tool</h3>
            <p>Java Spring Boot ¬∑ Angular ¬∑ GitLab CI/CD</p>
          </Link>
        </div>
      </section>
    </main>
  );
};

export default DockerSkill;
